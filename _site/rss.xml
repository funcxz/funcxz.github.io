<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>functional exercises</title>
        <description>functional exercises - Denys Kholod</description>
        <link>https://funcxz.github.io</link>
        <atom:link href="https://funcxz.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Sat, 08 Oct 2016 00:37:33 +0300</lastBuildDate>
        <pubDate>Sat, 08 Oct 2016 00:37:33 +0300</pubDate>
        <ttl>60</ttl>


        <item>
                <title>Capitals &amp; Countries &lt;| quiz game</title>
                <description>
&lt;p&gt;This exercise starts with F# version of quiz game (for the given country, type the name of its capital city) that is 21 lines of code placed in a single F# script file.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.worldbank.org/&quot;&gt;World Bank&lt;/a&gt; APIs and &lt;a href=&quot;http://fsharp.github.io/FSharp.Data/library/WorldBank.html&quot;&gt;F# Data: WorldBank Provider&lt;/a&gt; are used to get pairs of countries and corresponding capitals.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dkholod/c68d8f8517ed93f2acee1f996c877f96.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Run the script on Mac terminal:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fsharpi CapitalsQuiz.fsx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or on Windows cmd:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fsi CapitalsQuiz.fsx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The next part of the exercise is to host quiz game online. I will examine &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm language&lt;/a&gt; to build the game UI.
The plan is to re-use the part of F# code which delivers random pairs of countries &amp;amp; capitals, and host it in &lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Modified version for function app:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dkholod/55cb33f1247f820c5d095cc8af7daaa7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Elm has great support for handling HTTP requests, though F# type provider is so easy to use that I just don’t want to mess directly with World Bank APIs on UI.&lt;/p&gt;

&lt;p&gt;Elm language promotes basic pattern that breaks up into the Model, Update, and View functions. Also, I will use The &lt;a href=&quot;https://debois.github.io/elm-mdl/#cards&quot;&gt;Material Design package for Elm&lt;/a&gt; to compose fancy View, but the rest is going to be &lt;em&gt;vanilla&lt;/em&gt; Elm code.&lt;/p&gt;

&lt;p&gt;Model and Messages contract:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dkholod/b0a183ac93f4d0dab1ca1573c81469f8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The prime piece of Update function:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dkholod/415961e96fc08e801420db461e70d339.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The View function is a simple DOM composition, but if you are interested, follow the link to a &lt;a href=&quot;https://github.com/dkholod/functionalexercises/blob/master/Elm/CapitalsQuizMD.elm&quot;&gt;full listing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The big deal about Elm is that for creating reusable views, there is no need to build components, directives, templates or other stuff which is sometimes &lt;em&gt;leaky&lt;/em&gt;. Instead, we code helper functions and compose the main view from it.&lt;/p&gt;

&lt;p&gt;Helper function example:
&lt;script src=&quot;https://gist.github.com/dkholod/03b83f1a4f8d89b95663a16182b421e1.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Try online how this all works together - &lt;a href=&quot;https://funcxz.github.io/examples/capitalsquiz.html&quot;&gt;Capitals &amp;amp; Countries quiz game&lt;/a&gt;&lt;/p&gt;
</description>
                <link>https://funcxz.github.io/functional%20exercises/2016/10/07/capitals-countries-quiz-game</link>
                <guid>https://funcxz.github.io/functional%20exercises/2016/10/07/capitals--countries-quiz-game</guid>
                <pubDate>Fri, 07 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Quicksort implementation and testing</title>
                <description>
&lt;p&gt;In this functional exercise, I’m going to implement simple Quicksort algorithm and examine it by using property-based testing approach.&lt;br /&gt;
For those who are not familiar with property-based testing, it is a great talk of Scott Wlaschin - &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/property-based-testing/&quot;&gt;An introduction to property based testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Libs&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fscheck/FsCheck&quot;&gt;FsCheck&lt;/a&gt; is a library for testing .NET programs on F#, C#, and VB.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rickynils/scalacheck&quot;&gt;ScalaCheck&lt;/a&gt; is a library used for automated property-based testing of Scala or Java programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both libraries are ports of Haskell’s &lt;a href=&quot;http://www.cse.chalmers.se/~rjmh/QuickCheck/&quot;&gt;QuickCheck&lt;/a&gt;, but ScalaCheck has influenced FsCheck as well.&lt;/p&gt;

&lt;h3 id=&quot;f35&quot;&gt;F#&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/dkholod/c9c6f3b711c7c3ffeed81de4dcafa29c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;output&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Check.One (config, &lt;code class=&quot;highlighter-rouge&quot;&gt;list is sorted&lt;/code&gt; badSort)&lt;br /&gt;
;;&lt;br /&gt;
Falsifiable, after 508 tests (3 shrinks) (StdGen (93102065,296205589)):&lt;br /&gt;
Label of failing property: neighbour pairs from a list should be ordered&lt;br /&gt;
Original:&lt;br /&gt;
[2; -1]&lt;br /&gt;
Shrunk:&lt;br /&gt;
[1; 0]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ok, passed 100000 tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;scala&quot;&gt;Scala&lt;/h3&gt;

&lt;p&gt;Sort function looks quite similar to F# version. &lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/dkholod/62a56c611ec035993d78d0f0877dff5b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;output&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;+ list is sorted.sorted list should have same length as original: OK, passe&lt;br /&gt;
  d 100000 tests.&lt;br /&gt;
! list is sorted.neighbour pairs from a list should be ordered: Falsified a&lt;br /&gt;
  fter 1506 passed tests.&lt;br /&gt;
&amp;gt; ARG_0: List(“0”, “-1”)&lt;br /&gt;
&amp;gt; ARG_0_ORIGINAL: List(“2147483647”, “-1208819329”)&lt;br /&gt;
+ list is sorted.sorted list should have same length as original: OK, passe&lt;br /&gt;
  d 100000 tests.&lt;br /&gt;
+ list is sorted.neighbour pairs from a list should be ordered: OK, passed&lt;br /&gt;
  100000 tests.&lt;br /&gt;
res0: Unit = ()&lt;/p&gt;
&lt;/blockquote&gt;

</description>
                <link>https://funcxz.github.io/functional%20exercises/2016/09/16/property-based-testing-quicksort-implementation</link>
                <guid>https://funcxz.github.io/functional%20exercises/2016/09/16/property-based-testing-quicksort-implementation</guid>
                <pubDate>Fri, 16 Sep 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Size of blobs in Azure Storage account</title>
                <description>
&lt;p&gt;In this functional exercise, I’m studying Azure Storage SDK to accomplish a storage size space calculation used by blobs.&lt;/p&gt;

&lt;h3 id=&quot;f35&quot;&gt;F#&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fsprojects/AzureStorageTypeProvider&quot;&gt;AzureTypeProvider&lt;/a&gt; hides some boilerplate code.
&lt;script src=&quot;https://gist.github.com/dkholod/0af9b17821169007cbcea34dfb028f46.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;scala&quot;&gt;Scala&lt;/h3&gt;
&lt;p&gt;Both Scala and Clojure are using &lt;a href=&quot;https://github.com/Azure/azure-storage-java&quot;&gt;Microsoft Azure Storage SDK for Java&lt;/a&gt;
&lt;script src=&quot;https://gist.github.com/dkholod/0d9793b62de05ad93f1b7ce5bb63cc44.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;clojure&quot;&gt;Clojure&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/dkholod/849ee1b8294561061c0d9c30a834bc07.js&quot;&gt;&lt;/script&gt;

</description>
                <link>https://funcxz.github.io/functional%20exercises/2016/09/06/size-of-blobs-in-azure-storage-account</link>
                <guid>https://funcxz.github.io/functional%20exercises/2016/09/06/size-of-blobs-in-azure-storage-account</guid>
                <pubDate>Tue, 06 Sep 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>List length using fold</title>
                <description>
&lt;p&gt;F#
&lt;script src=&quot;https://gist.github.com/dkholod/0eb40fe334973462eb8e3c910ff5cff2.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Scala
&lt;script src=&quot;https://gist.github.com/dkholod/9cf1b63e6fbadf0065a5d674a9ad4ef0.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Clojure
&lt;script src=&quot;https://gist.github.com/dkholod/3f9e48f7b675ec31a8f2e9d9fb87b7e4.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

</description>
                <link>https://funcxz.github.io/functional%20exercises/2016/08/19/list-length-using-fold</link>
                <guid>https://funcxz.github.io/functional%20exercises/2016/08/19/list-length-using-fold</guid>
                <pubDate>Fri, 19 Aug 2016 00:00:00 +0300</pubDate>
        </item>


</channel>
</rss>
